import logging
import json
import re

import telebot as tlb
from telebot import logger, types

from bdtbs import ids, olympiads, topics, years

# USE "source ~/venv/bin/activate"

# -----------------------------
# Logging
# -----------------------------

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("bot.log", mode="a", encoding="utf-8")],
)
logger.setLevel(logging.DEBUG)

# -----------------------------
# Bot & Runtime State
# -----------------------------

bot = tlb.TeleBot(ids["bot_api"])  # API token from bdtbs.py
user_data: dict[int, dict] = {}
user_feedback_data: dict[int, dict] = {}

# -----------------------------
# Utilities
# -----------------------------

def bool_has_digit(s):
    """Returns true if there are digits in a string.
    Argument: s (string).
    """
    return bool(re.search(r"\d", s))


def bool_has_ascii_letter(s):
    """Returns true if there are ascii letters in a string.
    Argument: s (string).
    """
    return bool(re.search(r"[A-Za-z]", s))


def bool_has_special_or_nonascii(s):
    """Returns true if there are special or non-ASCII characters.
    Arguments: s (string).
    """
    return bool(re.search(r"[^A-Za-z0-9\s]", s))


def sanitize_numerical_input(user_input: str) -> str:
    """Keeps only digits in a given string."""
    return re.sub(r"[^0-9]", "", user_input)


def sanitize_alphabetical_input(user_input: str) -> str:
    """Keeps only ASCII letters (A-Z, a-z) in a given string."""
    return re.sub(r"[^A-Za-z]", "", user_input)


def _ensure_private(message) -> bool:
    """Reply and abort if chat isn't a private chat."""
    if message.chat.type != "private":
        bot.reply_to(message, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É.")
        return False
    return True


def _kb_with_values(values: list[str], *, include_skip: bool = False, per_row: int = 3) -> types.ReplyKeyboardMarkup:
    """Build a compact keyboard from a list of strings.

    Args:
        values: button labels.
        include_skip: whether to prepend a "skip" button as a separate row.
        per_row: number of buttons per row (best-effort for last row).
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if include_skip:
        kb.add("skip")
    for i in range(0, len(values), per_row):
        kb.row(*values[i : i + per_row])
    return kb



# -----------------------------
# Command Handlers
# -----------------------------



@bot.message_handler(commands=["start"])
def start_handler(message):
    bot.copy_message(message.chat.id, ids["developer_id"], ids["start_fwd_msg_id"])


@bot.message_handler(commands=["id"])
def id_handler(message):
    text = json.dumps(message.json, indent=4, ensure_ascii=False)
    bot.send_message(message.chat.id, f"<pre>{text}</pre>", parse_mode="HTML")


@bot.message_handler(commands=["git"])
def git_handler(message):
    bot.send_message(
        message.chat.id,
        "üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: github.com/uhbl/bpsg-telegram-bot\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê–±—ã–ª–∞–π—Ö–∞–Ω (github.com/uhbl)",
    )


@bot.message_handler(commands=["cancel"])
def cancel_handler(message):
    user_id = message.chat.id
    if user_id in user_data:
        user_data.pop(user_id)
        bot.send_message(user_id, "üõë –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /post.")
    else:
        bot.send_message(user_id, "–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.")


@bot.message_handler(commands=["feedback"])
def feedback_handler(message):
    user_id = message.chat.id
    bot.send_message(user_id, "üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
    user_feedback_data[user_id] = {
        "step": "feedback_called",
        "feedback": None,
        "username": message.from_user.username,
    }


@bot.message_handler(func=lambda m: user_feedback_data.get(m.chat.id, {}).get("step") == "feedback_called")
def feedback_sender(message):
    user_id = message.chat.id
    if len(message.text) < 500:
        user_feedback_data[user_id]["feedback"] = message.text
        bot.send_message(ids["developer_id"], f"#FEEDBACK\n\n'{user_feedback_data[user_id]['feedback']}' from @{user_feedback_data[user_id]['username']}.",)
        user_feedback_data.pop(user_id)
    else:
        bot.send_message(user_id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.")


@bot.message_handler(commands=["post"])
def post_command_handler(message):
    if message.chat.type != "private":
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç—É.")
        return

    user_id = message.chat.id
    user_username = message.from_user.username

    user_data[user_id] = {
        "step": "text",
        "text": None,
        "media_amount": None,
        "media_counter": 0,
        "media_type": None,
        "media": [],
        "media_finished": False,
        "source": None,
        "year": "",
        "topic": None,
        "comments": None,
        "username": user_username,
    }

    bot.send_message(
        user_id,
        "üìù [–®–∞–≥ 1/7] –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 900 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ ‚Äî –≤ —ç—Ç–∞–ø–µ –º–µ–¥–∏–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.",
    )


# -----------------------------
# Flow Handlers
# -----------------------------


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "text")
def handle_text(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    if len(message.text) < 900:
        user_data[user_id]["text"] = message.text
        user_data[user_id]["step"] = "media_amount"

        # 0..10 buttons in compact rows
        nums = [str(i) for i in range(0, 11)]
        kb = _kb_with_values(nums, include_skip=False, per_row=4)
        bot.send_message(
            user_id,
            "üìé [–®–∞–≥ 2/7] –°–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞‚Äë—Ñ–∞–π–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ 0‚Äì10. –ù–∞–∂–º–∏—Ç–µ 0, –µ—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.",
            reply_markup=kb,
        )
    else:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî 900 —Å–∏–º–≤–æ–ª–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        )


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "media_amount")
def handle_media_amount(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    text = sanitize_numerical_input(message.text)

    if text == "0":
        user_data[user_id]["media_finished"] = True
        user_data[user_id]["step"] = "source"
        bot.send_message(user_id, "–ú–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏.", reply_markup=types.ReplyKeyboardRemove())

        kb = _kb_with_values(list(olympiads.values()), include_skip=True, per_row=3)
        bot.send_message(
            user_id,
            "üéØ [–®–∞–≥ 3/7] –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´skip¬ª.",
            reply_markup=kb,
        )
        return

    try:
        num = int(text)
        if 1 <= num <= 10:
            user_data[user_id]["media_amount"] = num
            user_data[user_id]["step"] = "media"
            bot.send_message(
                user_id,
                "üì§ [–®–∞–≥ 2/7] –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ò–õ–ò —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
                reply_markup=types.ReplyKeyboardRemove(),
            )
        else:
            bot.send_message(user_id, "–î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ 10 —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")


@bot.message_handler(content_types=["photo"])
def handle_album_photo(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    if user_data.get(user_id, {}).get("step") != "media":
        return

    if user_data[user_id]["media_type"] is None:
        user_data[user_id]["media_type"] = "photo"
    elif user_data[user_id]["media_type"] != "photo":
        bot.send_message(user_id, "–ù–µ–ª—å–∑—è —Å–º–µ—à–∏–≤–∞—Ç—å —Ç–∏–ø—ã: –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        return

    user_data[user_id]["media_type"] = "photo"
    user_data[user_id]["media"].append(message.photo[-1].file_id)
    user_data[user_id]["media_counter"] += 1

    if user_data[user_id]["media_counter"] == user_data[user_id]["media_amount"]:
        user_data[user_id]["media_finished"] = True
        user_data[user_id]["step"] = "source"
        kb = _kb_with_values(list(olympiads.values()), include_skip=True, per_row=3)
        bot.send_message(
            user_id,
            "‚úÖ –ú–µ–¥–∏–∞ –ø—Ä–∏–Ω—è—Ç—ã. üéØ [–®–∞–≥ 3/7] –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´skip¬ª.",
            reply_markup=kb,
        )


@bot.message_handler(content_types=["document"])
def handle_album_document(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    if user_data.get(user_id, {}).get("step") != "media":
        return

    if user_data[user_id]["media_type"] is None:
        user_data[user_id]["media_type"] = "document"
    elif user_data[user_id]["media_type"] != "document":
        bot.send_message(user_id, "–ù–µ–ª—å–∑—è —Å–º–µ—à–∏–≤–∞—Ç—å —Ç–∏–ø—ã: –≤—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        return

    user_data[user_id]["media_type"] = "document"
    user_data[user_id]["media"].append(message.document.file_id)
    user_data[user_id]["media_counter"] += 1

    if user_data[user_id]["media_counter"] == user_data[user_id]["media_amount"]:
        user_data[user_id]["media_finished"] = True
        user_data[user_id]["step"] = "source"
        kb = _kb_with_values(list(olympiads.values()), include_skip=True, per_row=3)
        bot.send_message(
            user_id,
            "‚úÖ –ú–µ–¥–∏–∞ –ø—Ä–∏–Ω—è—Ç—ã. üéØ [–®–∞–≥ 3/7] –£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´skip¬ª.",
            reply_markup=kb,
        )


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "source")
def handle_source(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    source_olymps = sanitize_alphabetical_input(message.text)

    if source_olymps in olympiads.values():
        user_data[user_id]["source"] = source_olymps
        user_data[user_id]["step"] = "year"
        bot.send_message(
            user_id,
            "üìÖ [–®–∞–≥ 4/7] –£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025).",
            reply_markup=types.ReplyKeyboardRemove(),
        )
    elif source_olymps == "skip":
        user_data[user_id]["source"] = "–î—Ä—É–≥–æ–µ"
        user_data[user_id]["step"] = "topic"
        kb = _kb_with_values(list(topics.values()), include_skip=False, per_row=3)
        bot.send_message(
            user_id,
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω. üìö [–®–∞–≥ 5/7] –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ ¬´skip¬ª.",
            reply_markup=kb,
        )
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "year")
def handle_year(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    clear_year = sanitize_numerical_input(message.text)
    if bool_has_digit(clear_year):
        ymin = years.get("lower_bound", years.get("min", 1990))
        ymax = years.get("upper_bound", years.get("max", 2027))
        if clear_year and clear_year.isdigit() and ymin <= int(yr) <= ymax:
            user_data[user_id]["year"] = clear_year
            user_data[user_id]["step"] = "topic"
            kb = _kb_with_values(list(topics.values()), include_skip=False, per_row=3)
            bot.send_message(user_id, "–ì–æ–¥ —É–∫–∞–∑–∞–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞—á–∏ (–ø–æ –≥–∞–π–¥—É).", reply_markup=kb)
        else:
            bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥.")
    else:
        bot.send_message(user_id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ü–∏—Ñ—Ä (—Å–ª–æ–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è).")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "topic")
def handle_topic(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    if message.text in topics.values():
        user_data[user_id]["topic"] = message.text
        user_data[user_id]["step"] = "comments"
        bot.send_message(user_id, "üìù [–®–∞–≥ 6/7] –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é). –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª.")
    else:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "comments")
def handle_comments(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    if len(message.text) < 100:
        user_data[user_id]["comments"] = message.text
        bot.send_message(user_id, "üîç [–®–∞–≥ 7/7] –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä‚Ä¶ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        preview_problem(user_id)
        user_data[user_id]["step"] = "preview_confirm"
    else:
        bot.send_message(user_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∫–æ—Ä–æ—á–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


# -----------------------------
# Preview & Send
# -----------------------------

def preview_problem(user_id: int) -> None:
    data = user_data[user_id]
    formatted_message = (
        f"Source: #{data['source']}{data['year']}\n"
        f"Topic: #{data['topic']}\n\n{data['text']}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}"
    )

    media_type = data["media_type"]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("Yes", "No")

    if media_type == "photo":
        media = [types.InputMediaPhoto(media=file_id) for file_id in data["media"]]
        media[0].caption = formatted_message
        bot.send_media_group(user_id, media=media)
    elif media_type == "document":
        media = [types.InputMediaDocument(media=file_id) for file_id in data["media"]]
        media[-1].caption = formatted_message
        bot.send_media_group(user_id, media=media)
    else:
        bot.send_message(user_id, formatted_message)

    bot.send_message(user_id, "‚úÖ –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ? –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º? (Yes/No)", reply_markup=kb)


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "preview_confirm")
def handle_preview_confirmation(message):
    if not _ensure_private(message):
        return

    user_id = message.chat.id
    text = message.text.strip().lower()
    if text == "yes":
        send_problem(user_id)
        bot.send_message(user_id, "üéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())
    elif text == "no":
        user_data.pop(user_id)
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /post.", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´Yes¬ª –∏–ª–∏ ¬´No¬ª.")


def send_problem(user_id: int) -> None:
    data = user_data[user_id]
    formatted_message = (
        f"Source: #{data['source']}{data['year']}\n"
        f"Topic: #{data['topic']}\n\n{data['text']}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}"
    )

    media_type = data["media_type"]
    if media_type == "photo":
        media = [types.InputMediaPhoto(media=file_id) for file_id in data["media"]]
        media[0].caption = formatted_message
        bot.send_media_group(ids["problems_id"], media=media)
    elif media_type == "document":
        media = [types.InputMediaDocument(media=file_id) for file_id in data["media"]]
        media[-1].caption = formatted_message
        bot.send_media_group(ids["problems_id"], media=media)
    else:
        bot.send_message(ids["problems_id"], formatted_message)

    bot.send_message(ids["problems_id"], f"ID: {user_id}\n@: @{data['username']} \n")
    user_data.pop(user_id)


# -----------------------------
# Polling
# -----------------------------
bot.infinity_polling()
